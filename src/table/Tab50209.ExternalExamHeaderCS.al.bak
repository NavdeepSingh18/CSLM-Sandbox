table 50209 "External Exam Header-CS"
{
    // version V.001-CS

    // Sr.No.    Emp. ID     Date          Trigger                                 Remarks
    // 1         CSPL-00092    06-05-2019    OnInsert                                No. Series and Assign Value in User Id and Document Type Field.
    // 2         CSPL-00092    06-05-2019    OnModify                                Assign Value in Fields
    // 3         CSPL-00092    06-05-2019    OnDelete                                Delete data form Table
    // 4         CSPL-00092    06-05-2019    No. - OnValidate                      No. Series and Assign Value in Status Field
    // 5         CSPL-00092    06-05-2019    Course Code - OnValidate                Validate And Clear Fields
    // 6         CSPL-00092    06-05-2019    Semester - OnValidate                  Validate Data
    // 7         CSPL-00092    06-05-2019    Subject Type - OnValidate              Validate Data
    // 8         CSPL-00092    06-05-2019    Subject Code - OnValidate              Validate Data And Assign value in fields
    // 9         CSPL-00092    06-05-2019    Subject Code - OnLookup                 Validate Data And Assign value in fields
    // 10        CSPL-00092    06-05-2019    External Maximum - OnValidate          Validate Data
    // 11        CSPL-00092    06-05-2019    Academic Year - OnValidate            Validate Data
    // 12        CSPL-00092    06-05-2019    Staff Code - OnValidate              Validate Data
    // 13        CSPL-00092    06-05-2019    Section - OnValidate                Validate Data
    // 14        CSPL-00092    06-05-2019    Total Maximum - OnValidate            Validate Data
    // 15        CSPL-00092    06-05-2019    Type Of Course - OnValidate            Validate Data
    // 16        CSPL-00092    06-05-2019    Year - OnValidate                    Validate Data
    // 17        CSPL-00092    06-05-2019    Document Type - OnValidate            Validate Data
    // 18        CSPL-00092    06-05-2019    Exam Type - OnValidate              Validate Data
    // 19        CSPL-00092    06-05-2019    Exam Schedule Code - OnValidate        Assign Vailue in Fields
    // 20        CSPL-00092    06-05-2019    Assistedit                            Function for Select no. series
    // 21        CSPL-00092    06-05-2019    ValidateShortcutDimCode                Function for Validate Dimensions
    // 22        CSPL-00092    06-05-2019    CheckStudentExternalExamExists        Function For Validate Data

    Caption = 'External Exam Header-CS';
    DrillDownPageID = "External Student List-CS";
    LookupPageID = "External Student List-CS";

    fields
    {
        field(1; "No."; Code[20])
        {
            Caption = 'No.';
            DataClassification = CustomerContent;
            trigger OnValidate()
            begin
                //Code added for No. Series and Assign Value in Status Field::CSPL-00092::06-05-2019: Start
                IF "No." <> xRec."No." THEN BEGIN
                    "AcademicsSetupCS".GET();
                    NoSeriesManagement.TestManual(AcademicsSetupCS."Internal Marks No.");
                    "No.Series" := '';
                END;
                Status := Status::Released;
                //Code added for No. Series and Assign Value in Status Field::CSPL-00092::06-05-2019: Start
            end;
        }
        field(2; "Course Code"; Code[20])
        {
            Caption = 'Course Code';
            DataClassification = CustomerContent;
            TableRelation = "Course Master-CS";

            trigger OnValidate()
            begin
                //Code added for Validate And Clear Fields::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();

                IF "Course Code" = '' THEN BEGIN
                    "Exam Type" := "Exam Type"::" ";
                    Semester := '';
                    Year := '';
                    "Type Of Course" := "Type Of Course"::" ";
                    "Global Dimension 1 Code" := '';
                    "Global Dimension 2 Code" := '';
                    "Academic Year" := '';
                    VALIDATE("Subject Type", '');
                    VALIDATE("Subject Code", '');
                    "Staff Code" := '';
                END;
                //Code added for Validate And Clear Fields::CSPL-00092::06-05-2019: End
            end;
        }
        field(3; Semester; Code[10])
        {
            Caption = 'Semester';
            DataClassification = CustomerContent;
            TableRelation = "Course Sem. Master-CS"."Semester Code" WHERE("Course Code" = FIELD("Course Code"),
                                                                           "Academic Year" = FIELD("Academic Year"));

            trigger OnValidate()
            begin
                //Code added for Validate And Clear Fields::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                TESTFIELD("Course Code");
                ExternalExamHeaderCS.GET("No.");
                IF ExternalExamHeaderCS."Internal Generated" OR ExternalExamHeaderCS."External Generated" THEN
                    ERROR(Text002Lbl);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(4; "Subject Type"; Code[20])
        {
            Caption = 'Subject Type';
            DataClassification = CustomerContent;
            TableRelation = "Subject Type-CS";

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                VALIDATE("Subject Code", '');
                ExternalExamHeaderCS.GET("No.");
                IF ExternalExamHeaderCS."Internal Generated" OR ExternalExamHeaderCS."External Generated" THEN
                    ERROR(Text002Lbl);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(5; "Subject Code"; Code[20])
        {
            Caption = 'Subject Code';
            DataClassification = CustomerContent;

            trigger OnLookup()
            begin
                //Code added for Validate Data And Assign value in fields::CSPL-00092::06-05-2019: Start
                TESTFIELD("Subject Type");
                TESTFIELD("Academic Year");
                TestField("Course Code");
                TestField(Semester);
                TestField("Global Dimension 1 Code");
                TestField("Subject Class");
                ExternalExamHeaderCS.GET("No.");
                CourseWiseSubjectLineCS.Reset();
                CourseWiseSubjectLineCS.SETCURRENTKEY("Course Code", Semester, Year, "Subject Type", "Academic Year");
                CourseWiseSubjectLineCS.SETRANGE("Course Code", "Course Code");
                CourseWiseSubjectLineCS.SETRANGE("Academic Year", "Academic Year");
                CourseWiseSubjectLineCS.SETRANGE(Semester, Semester);
                CourseWiseSubjectLineCS.SETRANGE("Global Dimension 1 Code", "Global Dimension 1 Code");
                CourseWiseSubjectLineCS.SETRANGE("Subject Classification", "Subject Class");
                IF "Type Of Course" = "Type Of Course"::Semester THEN
                    CourseWiseSubjectLineCS.SETRANGE(Semester, Semester)
                ELSE
                    CourseWiseSubjectLineCS.SETRANGE(Year, Year);
                CourseWiseSubjectLineCS.SETRANGE("Subject Type", "Subject Type");
                IF CourseWiseSubjectLineCS.FINDSET() THEN
                    IF "PAGE".RUNMODAL(0, CourseWiseSubjectLineCS) = ACTION::LookupOK THEN
                        IF NOT ExternalExamHeaderCS."Result Generated" THEN BEGIN
                            VALIDATE("Subject Code", CourseWiseSubjectLineCS."Subject Code");
                            "Minimum Credit Points Required" := CourseWiseSubjectLineCS.Credit;
                            "Internal Maximum" := CourseWiseSubjectLineCS."Internal Maximum";
                            "External Maximum" := CourseWiseSubjectLineCS."External Maximum";
                            "Total Maximum" := CourseWiseSubjectLineCS."Total Maximum";
                        END;


                //Code added for Validate Data And Assign value in fields::CSPL-00092::06-05-2019: End
            end;

            trigger OnValidate()
            begin
                //Code added for Validate Data And Assign value in fields::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                SubjectMasterCS.Reset();
                SubjectMasterCS.SETRANGE(Code, "Subject Code");
                IF SubjectMasterCS.FINDFIRST() THEN BEGIN
                    "Subject Description" := SubjectMasterCS.Description;
                    "External Maximum" := SubjectMasterCS."External Maximum";
                    "Internal Maximum" := SubjectMasterCS."Internal Maximum";
                    "Minimum Credit Points Required" := SubjectMasterCS.Credit;
                    "Total Maximum" := SubjectMasterCS."Total Maximum";
                END ELSE
                    IF "Subject Code" = '' THEN BEGIN
                        "Subject Description" := '';
                        "External Maximum" := 0;
                        "Internal Maximum" := 0;
                        "Minimum Credit Points Required" := 0;
                        "Total Maximum" := 0;
                    END;
                //Code added for Validate Data And Assign value in fields::CSPL-00092::06-05-2019: End
            END;
        }
        field(6; "External Maximum"; Decimal)
        {
            Caption = 'External Maximum';
            DataClassification = CustomerContent;
            Editable = true;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                ExternalExamHeaderCS.GET("No.");
                IF ExternalExamHeaderCS."External Generated" THEN
                    ERROR(Text002Lbl);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(7; "Academic Year"; Code[20])
        {
            Caption = 'Academic Year';
            DataClassification = CustomerContent;
            TableRelation = "Academic Year Master-CS";

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(8; "Staff Code"; Code[20])
        {
            Caption = 'Staff Code';
            DataClassification = CustomerContent;
            TableRelation = Employee;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                ExternalExamHeaderCS.GET("No.");
                IF ExternalExamHeaderCS."Internal Generated" OR ExternalExamHeaderCS."External Generated" THEN
                    ERROR(Text002Lbl);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(9; "No.Series"; Code[20])
        {
            Caption = 'No.Series';
            DataClassification = CustomerContent;
        }
        field(10; Section; Code[10])
        {
            Caption = 'Section';
            DataClassification = CustomerContent;
            TableRelation = "Course Section Master-CS"."Section Code" WHERE("Course Code" = FIELD("Course Code"));

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                TESTFIELD(Semester);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(11; "Total Maximum"; Decimal)
        {
            Caption = 'Total Maximum';
            DataClassification = CustomerContent;
            Editable = true;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                ExternalExamHeaderCS.GET("No.");
                IF ExternalExamHeaderCS."External Generated" THEN
                    ERROR(Text002Lbl);
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(12; "Internal Generated"; Boolean)
        {
            Caption = 'Internal Generated';
            DataClassification = CustomerContent;
        }
        field(13; "External Generated"; Boolean)
        {
            Caption = 'External Generated';
            DataClassification = CustomerContent;
        }
        field(14; "Result Generated"; Boolean)
        {
            Caption = 'Result Generated';
            DataClassification = CustomerContent;
        }
        field(15; "CBCS Batch"; Code[20])
        {
            Caption = 'CBCS Batch';
            DataClassification = CustomerContent;
        }
        field(480; "Dimension Set ID"; Integer)
        {
            Caption = 'Dimension Set ID';
            DataClassification = CustomerContent;
            Editable = false;
        }
        field(50000; Status; Option)
        {
            Caption = 'Status';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = true;
            OptionCaption = 'Open,Released,Published';
            OptionMembers = Open,Released,Published;
        }
        field(50001; "Global Dimension 1 Code"; Code[20])
        {
            CaptionClass = '1,1,1';
            Caption = 'Global Dimension 1 Code';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
            TableRelation = "Dimension Value".Code WHERE("Global Dimension No." = CONST(1));
        }
        field(50002; "Global Dimension 2 Code"; Code[20])
        {
            CaptionClass = '1,1,2';
            Caption = 'Global Dimension 2 Code';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
            TableRelation = "Dimension Value".Code WHERE("Global Dimension No." = CONST(2));
        }
        field(50003; Updated; Boolean)
        {
            Caption = 'Updated';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(50013; "Type Of Course"; Option)
        {
            Caption = 'Type Of Course';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
            OptionCaption = ' ,Semester,Year';
            OptionMembers = " ",Semester,Year;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(50014; "Final Years Course"; Code[10])
        {
            Caption = 'Final Years Course';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(50015; Year; Code[20])
        {
            Caption = 'Year';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Year Master-CS";

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(50016; "Internal Maximum"; Decimal)
        {
            Caption = 'Internal Maximum';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = true;
        }
        field(50017; "Minimum Credit Points Required"; Decimal)
        {
            Caption = 'Minimum Credit Points Required';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
        }
        field(50031; "Document Type"; Option)
        {
            Caption = 'Document Type';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
            OptionCaption = ' ,Internal,External';
            OptionMembers = " ",Internal,External;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(50032; "Exam Type"; Option)
        {
            Caption = 'Exam Type';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            OptionCaption = ' ,Regular,Re-Registration,Makeup';
            OptionMembers = " ",Regular,"Re-Registration",Makeup;

            trigger OnValidate()
            begin
                //Code added for Validate Data::CSPL-00092::06-05-2019: Start
                CheckStudentExternalExamExists();
                //Code added for Validate Data::CSPL-00092::06-05-2019: End
            end;
        }
        field(50033; "Exam Schedule Code"; Code[20])
        {
            Caption = 'Exam Schedule Code';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Exam Time Table Line-CS";

            trigger OnValidate()
            begin
                //Code added for Assign Vailue in Fields::CSPL-00092::06-05-2019: Start
                ExamTimeTableLineCS.Reset();
                ExamTimeTableLineCS.SETRANGE(ExamTimeTableLineCS."Document No.", "Exam Schedule Code");
                IF ExamTimeTableLineCS.FINDFIRST() THEN BEGIN
                    VALIDATE("Course Code", ExamTimeTableLineCS."Course Code");
                    Semester := ExamTimeTableLineCS."Semester Code";
                    "Subject Type" := ExamTimeTableLineCS."Subject Type";
                    VALIDATE("Subject Code", ExamTimeTableLineCS."Subject Code");
                    "Academic Year" := ExamTimeTableLineCS."Academic Year";
                END ELSE BEGIN
                    "Course Code" := '';
                    Semester := '';
                    "Subject Type" := '';
                    "Subject Code" := '';
                    "Academic Year" := '';
                END;
                //Code added for Assign Vailue in Fields::CSPL-00092::06-05-2019: End
            END;
        }
        field(50034; "Subject Class"; Code[20])
        {
            Caption = 'Subject Class';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Subject Classification-CS";
        }
        field(50035; "Course Name"; Text[100])
        {
            Caption = 'Course Name';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
        }
        field(50036; "Subject Description"; Text[100])
        {
            Caption = 'Subject Description';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            Editable = false;
        }
        field(50037; "Exam Date"; Date)
        {
            Caption = 'Exam Date';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(50038; "Program"; Code[20])
        {
            Caption = 'Program';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Graduation Master-CS".Code;
        }
        field(50039; "Student Group"; Code[20])
        {
            Caption = 'Student Group';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Group Master-CS".Code;
        }
        field(50040; "Exam Classification"; Code[20])
        {
            Caption = 'Exam Classification';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
            TableRelation = "Examination Type Master-CS".Code WHERE("Exam Type" = FIELD("Document Type"));
        }
        field(50041; "Term"; Option)
        {
            Caption = 'Term';
            DataClassification = CustomerContent;
            OptionCaption = 'FALL,SPRING,SUMMER';
            OptionMembers = FALL,SPRING,SUMMER;
        }
        field(50055; "Exam Slot"; Code[20])
        {
            Caption = 'Exam Slot';
            DataClassification = CustomerContent;
            TableRelation = "Examination Time Slot-CS";
        }
        field(33048920; "User ID"; Code[50])
        {
            Caption = 'User ID';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048921; "Portal ID"; Code[20])
        {
            Caption = 'Portal ID';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048922; "Created By"; Text[50])
        {
            Caption = 'Created By';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048923; "Created On"; Date)
        {
            Caption = 'Created On';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048924; "Updated By"; Text[50])
        {
            Caption = 'Updated By';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048925; "Updated On"; Date)
        {
            Caption = 'Updated On';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048926; "Updated By Name"; Text[50])
        {
            Caption = 'Updated By Name';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
        field(33048928; "Created By Name"; Text[50])
        {
            Caption = 'Created By Name"';
            DataClassification = CustomerContent;
            Description = 'CS Field Added 09-05-2019';
        }
    }

    keys
    {
        key(Key1; "No.")
        {
        }
        key(Key2; "Course Code", Semester, Section, "Academic Year", "Subject Type", "Subject Code")
        {
        }
        key(Key3; "Course Code", Semester, "Subject Code", "Academic Year")
        {
        }
    }

    fieldgroups
    {
    }

    trigger OnDelete()
    begin
        //Code added for Delete data form Table::CSPL-00092::06-05-2019: Start
        TestField(Status, Status::Open);
        ExamTimeTableLineCS.Reset();
        ExamTimeTableLineCS.SetRange("Exam No.", "No.");
        IF ExamTimeTableLineCS.FindSet() then
            ExamTimeTableLineCS.ModifyAll(ExamTimeTableLineCS."Exam No.", '');

        // ExternalExamLineCS.RESET();
        // ExternalExamLineCS.SETRANGE("Document No.", "No.");
        // ExternalExamLineCS.SetFilter("External Mark", '<>%1', 0);
        // IF ExternalExamLineCS.FindFirst() then
        //     Error('External Marks should be Zero');

        ExternalExamLineCS.Reset();
        ExternalExamLineCS.SETRANGE("Document No.", "No.");
        ExternalExamLineCS.DELETEALL();
        //Code added for Delete data form Table::CSPL-00092::06-05-2019: End
    end;

    trigger OnInsert()
    begin
        //Code added for No. Series and Assign Value in User Id and Document Type Field::CSPL-00092::06-05-2019: Start
        AcademicsSetupCS.GET();
        IF "No.Series" = '' THEN BEGIN
            AcademicsSetupCS.TESTFIELD("External Marks No.");
            NoSeriesManagement.InitSeries(AcademicsSetupCS."External Marks No.", xRec."No.Series", 0D, "No.", "No.Series");
        END;
        "User ID" := FORMAT(UserId());
        "Created By" := FORMAT(UserId());
        "Created On" := Today();
        "Document Type" := "Document Type"::External;
        //Code added for No. Series and Assign Value in User Id and Document Type Field::CSPL-00092::06-05-2019: End
    end;

    trigger OnModify()
    begin
        //Code added for Assign Value in Fields::CSPL-00092::06-05-2019: Start
        IF xRec.Updated = Updated THEN
            Updated := TRUE;

        "Updated By" := FORMAT(UserId());
        "Updated On" := TODAY();
        //Code added for Assign Value in Fields::CSPL-00092::06-05-2019: End
    end;

    var
        CourseWiseSubjectLineCS: Record "Course Wise Subject Line-CS";

        ExternalExamHeaderCS: Record "External Exam Header-CS";

        AcademicsSetupCS: Record "Academics Setup-CS";
        SubjectMasterCS: Record "Subject Master-CS";


        ExternalExamLineCS: Record "External Exam Line-CS";
        ExamTimeTableLineCS: Record "Exam Time Table Line-CS";
        DimensionManagement: Codeunit "DimensionManagement";
        NoSeriesManagement: Codeunit "NoSeriesManagement";
        Text002Lbl: Label 'You can''t modify completed gereration.';


        Text_10001Lbl: Label 'Student External Exam line exists.';


    procedure Assistedit(OldStudentExternalHeader: Record "External Exam Header-CS"): Boolean
    begin
        //Code added for Select no. series::CSPL-00092::06-05-2019: Start
        WITH ExternalExamHeaderCS DO BEGIN
            ExternalExamHeaderCS := Rec;
            AcademicsSetupCS.GET();
            AcademicsSetupCS.TESTFIELD("External Marks No.");
            IF NoSeriesManagement.SelectSeries(AcademicsSetupCS."External Marks No.", OldStudentExternalHeader."No.Series", "No.Series") THEN BEGIN
                NoSeriesManagement.SetSeries("No.");
                Rec := ExternalExamHeaderCS;
                EXIT(TRUE);
            END;
        END;
        //Code added for Select no. series::CSPL-00092::06-05-2019: End
    end;

    local procedure ValidateShortcutDimCode(FieldNumber: Integer; var ShortcutDimCode: Code[20])
    var
        OldDimSetID: Integer;
    begin
        //Code added for Validate Dimensions::CSPL-00092::06-05-2019: Start
        OldDimSetID := "Dimension Set ID";
        DimensionManagement.ValidateShortcutDimValues(FieldNumber, ShortcutDimCode, "Dimension Set ID");
        IF "No." <> '' THEN
            Modify();
        //Code added for Validate Dimensions::CSPL-00092::06-05-2019: End
    end;

    local procedure CheckStudentExternalExamExists()
    begin
        //Code added for Validate Data::CSPL-00092::06-05-2019: Start
        ExternalExamLineCS.Reset();
        ExternalExamLineCS.SETRANGE("Document No.", "No.");
        IF ExternalExamLineCS.FINDFIRST() THEN
            ERROR(Text_10001Lbl);
        //Code added for Validate Data::CSPL-00092::06-05-2019: Data
    end;
}

